package gooseutil

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"io"
	"io/fs"
	"sort"
)

// Digest is used to generate a unique identifier for the contents of a directory, which can be used
// to determine if the contents of the directory have changed.
//
// The digest is generated by iterating over the files in the directory, skipping directories,
// sorting them, and then hashing the contents of each file. The hash of each file is then hashed to
// generate the final digest. The resulting digest is a sha256 hash truncated to 32 characters.
//
// It is adapted from the dirhash package. Ref:
//
//	https://cs.opensource.google/go/x/mod/+/refs/tags/v0.17.0:sumdb/dirhash/hash.go;l=31-44
//
// The output of this function is equivalent to the following shell command:
//
//	sha256sum $(find <dir> -type f | sort) | sha256sum | cut -c 1-32
func Digest(fsys fs.FS, root string) (string, error) {
	var files []string
	err := fs.WalkDir(fsys, root, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		if d.IsDir() {
			if path != root {
				return fs.SkipDir
			}
			// Skip the root directory.
			return nil
		}
		files = append(files, path)
		return nil
	})
	if err != nil {
		return "", err
	}
	if len(files) == 0 {
		return "", fmt.Errorf("no files found")
	}
	h := sha256.New()
	sort.Strings(files)
	for _, file := range files {
		f, err := fsys.Open(file)
		if err != nil {
			return "", err
		}
		hf := sha256.New()
		_, err = io.Copy(hf, f)
		f.Close()
		if err != nil {
			return "", err
		}
		fmt.Fprintf(h, "%x  %s\n", hf.Sum(nil), file)
		fmt.Printf("%x  %s\n", hf.Sum(nil), file)
	}
	digest := hex.EncodeToString(h.Sum(nil))[:32]
	return digest, nil
}
